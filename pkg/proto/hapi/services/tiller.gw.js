// Code generated by protoc-gen-grpc-js-client
// source: hapi/services/tiller.proto
// DO NOT EDIT!

/*
This is a RSVP based Ajax client for gRPC gateway JSON APIs.
*/

var xhr = require('grpc-xhr');

function releaseServiceSummarizeReleases(p, conf) {
    path = '/tiller/v2/releases/json'
    return xhr(path, 'GET', conf, p);
}

function releaseServiceGetReleaseStatus(p, conf) {
    path = '/tiller/v2/releases/' + p['name'] + '/versions/' + p['version'] + '/status/json'
    delete p['name']
    delete p['version']
    return xhr(path, 'GET', conf, p);
}

function releaseServiceGetReleaseContent(p, conf) {
    path = '/tiller/v2/releases/' + p['name'] + '/versions/' + p['version'] + '/content/json'
    delete p['name']
    delete p['version']
    return xhr(path, 'GET', conf, p);
}

function releaseServiceUpdateRelease(p, conf) {
    path = '/tiller/v2/releases/' + p['name'] + '/json'
    delete p['name']
    return xhr(path, 'PUT', conf, null, p);
}

function releaseServiceInstallRelease(p, conf) {
    path = '/tiller/v2/releases/' + p['name'] + '/json'
    delete p['name']
    return xhr(path, 'POST', conf, null, p);
}

function releaseServiceUninstallRelease(p, conf) {
    path = '/tiller/v2/releases/' + p['name'] + '/json'
    delete p['name']
    return xhr(path, 'DELETE', conf, p);
}

function releaseServiceGetVersion(p, conf) {
    path = '/tiller/v2/version/json'
    return xhr(path, 'GET', conf, p);
}

function releaseServiceRollbackRelease(p, conf) {
    path = '/tiller/v2/releases/' + p['name'] + '/versions/' + p['version'] + '/content/json'
    delete p['name']
    delete p['version']
    return xhr(path, 'DELETE', conf, p);
}

function releaseServiceGetHistory(p, conf) {
    path = '/tiller/v2/releases/' + p['name'] + '/json'
    delete p['name']
    return xhr(path, 'GET', conf, p);
}

var services = {
    releaseService: {
        listReleases: releaseServiceListReleases,
        summarizeReleases: releaseServiceSummarizeReleases,
        getReleaseStatus: releaseServiceGetReleaseStatus,
        getReleaseContent: releaseServiceGetReleaseContent,
        updateRelease: releaseServiceUpdateRelease,
        installRelease: releaseServiceInstallRelease,
        uninstallRelease: releaseServiceUninstallRelease,
        getVersion: releaseServiceGetVersion,
        rollbackRelease: releaseServiceRollbackRelease,
        getHistory: releaseServiceGetHistory,
        runReleaseTest: releaseServiceRunReleaseTest
    }
};

module.exports = {hapi: {services: {tiller: services}}};
